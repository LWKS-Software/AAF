#c *********************************************************************
#c
#c $Id$ $Name$
#c
#c The contents of this file are subject to the AAF SDK Public Source
#c License Agreement Version 2.0 (the "License"); You may not use this
#c file except in compliance with the License.  The License is available
#c in AAFSDKPSL.TXT, or you may obtain a copy of the License from the
#c Advanced Media Workflow Association, Inc., or its successor.
#c
#c Software distributed under the License is distributed on an "AS IS"
#c basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
#c the License for the specific language governing rights and limitations
#c under the License.  Refer to Section 3.3 of the License for proper use
#c of this Exhibit.
#c
#c WARNING:  Please contact the Advanced Media Workflow Association,
#c Inc., for more information about any additional licenses to
#c intellectual property covering the AAF Standard that may be required
#c to create and distribute AAF compliant products.
#c (http://www.amwa.tv/policies).
#c
#c Copyright Notices:
#c The Original Code of this file is Copyright 1998-2018, licensor of the
#c Advanced Media Workflow Association.  All rights reserved.
#c
#c The Initial Developer of the Original Code of this file and the
#c licensor of the Advanced Media Workflow Association is
#c Avid Technology.
#c All rights reserved.
#c
#c *********************************************************************
#startm .this-module 0
AAFSearchSource3\
#endm
#c
AD_HEAD
AD_IDL(///
/// The IAAFSearchSource3 interface is used to return source information
/// for some mono- or multi-channel mob slots.
///
/// In addition to the specific error results listed for each method\,
/// all methods in this interface may also return one of the following
/// values:
/// 
/// AAFRESULT_NOMEMORY
///   - insufficient system memory is available to perform the
///     operation.
///
/// AAFRESULT_NOT_INITIALIZED
///   - This object has not yet had Initialize\(\) called on it through
///     this object's primary interface.  Note that IAAFSearchSource3 is
///     not a primary interface for a concrete class\, so it is not
///     appropriate for the Initialize\(\) method to exist in this
///     interface.  The Initialize\(\) method is available through the
///     concrete object's primary interface.
///)
AD_DEFAULT_UUID(51D45ABD, 952F, 48A8, 90, 95, D3, 01, 96, 35, 40, 6E)
AD_XCLASS_BEGIN(Abstract, Transient)
#c
#c Original SearchSource2 methods
#c
AD_XMETHOD6(SearchSource,
			[in],
			  objPass,
			  aafSlotID_t,
			  slotID,
			  Slot ID,
			[in],
			  objPass,
			  aafPosition_t,
			  offset,
			  Offset,
			[in],
			  enumIn,
			  aafMobKind_t,
			  mobKind,
			  Mob Kind,
			[in],
			  objPass,
			  aafMediaCriteria_t *,
			  pMediaCrit,
			  Media Criteria,
			[in],
			  objPass,
			  aafOperationChoice_t *,
			  pOperationChoice,
			  Operation Choice,
			[out],
			  objOut,
			  AAFFindSourceInfo,
			  ppSourceInfo,
			  Source Information,
			This function returns the source information for a slot in a
  /// Master Mob or Source Mob.  It follows the Source Clip references
  /// in the specified slot until it encounters the kind of Mob
  /// specified in the mobKind parameter.  This function cannot be used
  /// on a Composition Mob and is not intended to be called
  /// iteratively.
  ///
  /// The returned component and find source info are AddRef\(\)ed
  /// before they are returned.
  ///
  /// Succeeds if all of the following are true:
  /// - ppSourceInfo is non-NULL
  /// - a Mob of the requested kind is found
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppCpnt is null.
  ///
  /// OM_ERR_INVALID_MOBTYPE
  ///	- The enumerator is out of range \(bad cast\, or writing
  ///      toolkit newer than reader\)
  ///
  /// OM_ERR_TRAVERSAL_NOT_POSS
  ///	- Can not find a mob of the given kind.)
AD_XMETHOD6(SearchSourceAdvanced,
			[in],
			  objPass,
			  aafSlotID_t,
			  slotID,
			  Slot ID,
			[in],
			  objPass,
			  aafPosition_t,
			  offset,
			  Offset,
			[in],
			  enumIn,
			  aafMobKind_t,
			  mobKind,
			  Mob Kind,
			[in],
			  objPass,
			  aafMediaCriteria_t *,
			  pMediaCrit,
			  Media Criteria,
			[in],
			  objPass,
			  aafOperationChoice_t *,
			  pOperationChoice,
			  Operation Choice,
			[out],
			  objOut,
			  AAFFindSourceInfo,
			  ppSourceInfo,
			  Source Information,
			This method returns the source information for a slot in a
  /// Master Mob or Source Mob.  It follows the Source Clip references
  /// in the specified slot until it encounters the kind of Mob
  /// specified in the mobKind parameter.  This method cannot be used
  /// on a Composition Mob and is not intended to be called
  /// iteratively.
  ///
  /// This method is similar to SearchSource\, except it attempts to
  /// compensate for errors introduced when converting offsets and
  /// lengths between different edit rates\, while traversing Source Clip
  /// reference chain. It accounts for the fact that the result of
  /// the conversion is often not exactly on a frame/sample boundary
  /// but within small enough distance that it can be rounded up to
  /// the boundary. This method produces better results with Source Clip
  /// reference chains that mix audio and video edit rates.
  ///
  /// The returned component and find source info are AddRef\(\)ed
  /// before they are returned.
  ///
  /// Succeeds if all of the following are true:
  /// - ppSourceInfo is non-NULL
  /// - a Mob of the requested kind is found
  /// 
  /// This method will return the following codes. If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppCpnt is null.
  ///
  /// OM_ERR_INVALID_MOBTYPE
  ///	- The enumerator is out of range \(bad cast\, or writing
  ///      toolkit newer than reader\)
  ///
  /// OM_ERR_TRAVERSAL_NOT_POSS
  ///	- Can not find a mob of the given kind.)
#c
#c New SearchSource3 methods
#c
AD_XMETHOD7(SearchMultichannelSource,
			[in],
			  objPass,
			  aafSlotID_t,
			  slotID,
			  Slot ID,
			[in],
			  objPass,
			  aafUInt32,
			  channelID,
			  Channel ID,
			[in],
			  objPass,
			  aafPosition_t,
			  offset,
			  Offset,
			[in],
			  enumIn,
			  aafMobKind_t,
			  mobKind,
			  Mob Kind,
			[in],
			  objPass,
			  aafMediaCriteria_t *,
			  pMediaCrit,
			  Media Criteria,
			[in],
			  objPass,
			  aafOperationChoice_t *,
			  pOperationChoice,
			  Operation Choice,
			[out],
			  objOut,
			  AAFFindSourceInfo,
			  ppSourceInfo,
			  Source Information,
			This function returns the source information for a specified channel
  /// of a multi-channel Mob Slot in a Master Mob or Source Mob.  It follows
  /// the Source Clip references in the specified slot until it encounters
  /// the kind of Mob specified in the mobKind parameter.  This function
  /// cannot be used on a Composition Mob and is not intended to be called
  /// iteratively.
  ///
  /// To find source information for a mono-channel Mob Slot the legacy 
  /// methods SearchSource\(\) and SearchSourceAdvanced\(\) shall be used. 
  /// Applications should query their returned objects for IAAFFindSourceInfo2 
  /// to retrieve information about multi-channel sources.
  ///
  /// The returned component and find source info are AddRef\(\)ed
  /// before they are returned.
  ///
  /// Succeeds if all of the following are true:
  /// - ppSourceInfo is non-NULL
  /// - a Mob of the requested kind is found
  /// 
  /// This method will return the following codes.  If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_INVALID_PARAM;
  ///   - Channel ID is zero.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppCpnt is null.
  ///
  /// OM_ERR_INVALID_MOBTYPE
  ///   - The enumerator is out of range \(bad cast\, or writing
  ///      toolkit newer than reader\)
  ///
  /// OM_ERR_TRAVERSAL_NOT_POSS
  ///   - Can not find a mob of the given kind.)
AD_XMETHOD7(SearchMultichannelSourceAdvanced,
			[in],
			  objPass,
			  aafSlotID_t,
			  slotID,
			  Slot ID,
			[in],
			  objPass,
			  aafUInt32,
			  channelID,
			  Channel ID,
			[in],
			  objPass,
			  aafPosition_t,
			  offset,
			  Offset,
			[in],
			  enumIn,
			  aafMobKind_t,
			  mobKind,
			  Mob Kind,
			[in],
			  objPass,
			  aafMediaCriteria_t *,
			  pMediaCrit,
			  Media Criteria,
			[in],
			  objPass,
			  aafOperationChoice_t *,
			  pOperationChoice,
			  Operation Choice,
			[out],
			  objOut,
			  AAFFindSourceInfo,
			  ppSourceInfo,
			  Source Information,
			This function returns the source information for a specified channel
  /// of a multi-channel Mob Slot in a Master Mob or Source Mob.  It follows
  /// the Source Clip references in the specified slot until it encounters
  /// the kind of Mob specified in the mobKind parameter.  This function
  /// cannot be used on a Composition Mob and is not intended to be called
  /// iteratively.
  ///
  /// To find source information for a mono-channel Mob Slot the legacy 
  /// methods SearchSource\(\) and SearchSourceAdvanced\(\) shall be used. 
  /// Applications should query their returned objects for IAAFFindSourceInfo2 
  /// to retrieve information about multi-channel sources.
  ///
  /// This method is similar to SearchMultichannelSource\, except it attempts to
  /// compensate for errors introduced when converting offsets and
  /// lengths between different edit rates\, while traversing Source Clip
  /// reference chain. It accounts for the fact that the result of
  /// the conversion is often not exactly on a frame/sample boundary
  /// but within small enough distance that it can be rounded up to
  /// the boundary. This method produces better results with Source Clip
  /// reference chains that mix audio and video edit rates.
  ///
  /// The returned component and find source info are AddRef\(\)ed
  /// before they are returned.
  ///
  /// Succeeds if all of the following are true:
  /// - ppSourceInfo is non-NULL
  /// - a Mob of the requested kind is found
  /// 
  /// This method will return the following codes. If more than one of
  /// the listed errors is in effect\, it will return the first one
  /// encountered in the order given below:
  /// 
  /// AAFRESULT_SUCCESS
  ///   - succeeded.  \(This is the only code indicating success.\)
  ///
  /// AAFRESULT_INVALID_PARAM;
  ///   - Channel ID is zero.
  ///
  /// AAFRESULT_NULL_PARAM
  ///   - ppCpnt is null.
  ///
  /// OM_ERR_INVALID_MOBTYPE
  ///   - The enumerator is out of range \(bad cast\, or writing
  ///      toolkit newer than reader\)
  ///
  /// OM_ERR_TRAVERSAL_NOT_POSS
  ///   - Can not find a mob of the given kind.)
AD_XCLASS_END(Abstract, Transient)
